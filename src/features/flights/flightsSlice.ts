import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState} from '../../app/store';
import * as api from '../../api/api';

// const dummyData:IFlight[] = [
  // {id: 1,name: "LX1498", destination: "ZRH", origin: "PRG", aircraft: "", date:"09.04.2020", duration:80},
  // {id: 2,name: "LX2098", destination: "PRG", origin: "ZRH", aircraft: "", date:"13.04.2020", duration:95}
// 

export interface IFlight {
  _id?: string,
  name?: string,
  destination?: string,
  origin?: string,
  aircraft?: string,
  date?:string,
  duration?:number
}

export interface FlightsState {
    flights: IFlight[];
    flight: IFlight;
    status: string;
    error: string | null;
};

const initialState: FlightsState = {
    flights: [],
    flight: {},
    status: "idle",
    error: null
};

export const fetchFlights = createAsyncThunk<IFlight[]>('flights/fetchFlights', async () => {
    const response = await api.getFlights();
    return response.flights;
})

export const fetchSingleFlight = createAsyncThunk('flights/fetchSingleFlight', async (id:string) => {
  const response = await api.getFlight(id);
  return response.flight;
})

export const addNewFlight = createAsyncThunk('flights/addNewFlight', async (newFlight:IFlight) => {
  const response = await api.addFlight(newFlight);
  return response.flight;
})

export const editFlight = createAsyncThunk('flights/updateFlight', async (flight:IFlight) => {
  const response = await api.updateFlight(flight);
  return response.flight;
})

export const deleteFlight = createAsyncThunk('flights/deleteFlight', async (id:string) => {
  const response = await api.deleteFlight(id);
  return response.flight;
})

export const flightsSlice = createSlice({
  name: 'flights',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // getAllFlights: (state)=> {
    //   console.log("reducer getAllFlights")
    //   state.loading = true
    // },
    // getFlightsSuccess: (state, {payload}) => {
    //   state.flights = payload
    //   state.loading = false
    //   state.hasErrors = false
    // }, 

    // flightAdded(state, action:PayloadAction<IFlight>) {
    //   state.flights.push(action.payload)

    // },
    
    flightRemoved(state, action:PayloadAction<string>) {
      const updatedFLights:IFlight[] = state.flights.filter(
        flight => flight._id !== action.payload)
      return {
        ...state,
        flights: updatedFLights
      }
    },
  },

  // prepare: (data: IFlight[]) => {

  // }
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchFlights.pending, (state) => {
        state.status = "loading"
      })
      .addCase(fetchFlights.fulfilled, (state, action:PayloadAction<IFlight[]>) => {
        return {
          ...state,
          flights: action.payload,
          status: "succeeded"
        }
      })
      .addCase(fetchFlights.rejected, (state, action:PayloadAction<any>) => {
        return {
          ...state,
          status: "failed",
          error: action.payload
        }
      })
      .addCase(fetchSingleFlight.pending, (state) => {
        return {
          ...state,
          status: "loading"
        }
      })
      .addCase(fetchSingleFlight.fulfilled, (state, action:PayloadAction<IFlight>) => {
        return {
          ...state,
          flight: action.payload,
          status: "succeeded"
        }
      })
      .addCase(addNewFlight.fulfilled, (state, action:PayloadAction<IFlight>) => {
        const updatedFlights:IFlight[] = [...state.flights, action.payload]
        return {
          ...state,
          flights: updatedFlights,
          status: "succeeded"
        }
      })
      .addCase(editFlight.fulfilled, (state, action:PayloadAction<IFlight>) => {
        const updatedFlights:IFlight[] = state.flights.map((flight) => {
          if (flight._id !== action.payload._id) {
            return flight
          }
          return {
            ...flight,
            ...action.payload
          }
        })

        return {
          ...state,
          status: "succeeded",
          flight: action.payload,
          flights: updatedFlights
        }
      })
      .addCase(editFlight.pending, (state) => {
        state.status = "loading"
      })
      .addCase(deleteFlight.fulfilled, (state, action:PayloadAction<IFlight>) => {
        const updatedFLights:IFlight[] = state.flights.filter(
          flight => flight._id !== action.payload._id)

        return {
          ...state,
          flights: updatedFLights,
          status: "succeeded"
        }
      })
    }
});
  
export const {/*getAllFlights, getFlightsSuccess flightAdded, flightUpdated*/ flightRemoved} = flightsSlice.actions

export const flightsSelector = (state:RootState) => state.flights
export const singleFlightSelector = (state:RootState) => state.flights.flight
export const selectFlightById = (state, flightId) =>
  state.flights.flights.find(flight => flight._id === flightId) 

export default flightsSlice.reducer;

// export function fetchFlights() {
//   // console.log("fetchFlights")
//   return async (dispatch) => {
//     dispatch(getAllFlights())
//     try {
//         const response = await fetch('http://localhost:4000/api/v1/flights')
//         // const response = await getFlights()
//         // console.log("Response", response)
//         const data = await response.json()
//         // console.log(data) 
//         dispatch(getFlightsSuccess(data.flights))
//       } catch(error) {
//           console.log(error)
//     }
//   }
// }
  